{
  "{\"sourceRoot\":\"/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend\",\"filename\":\"/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend",
      "filename": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src/server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar app = (0, _express[\"default\"])();\nvar port = 8000;\napp.use(_express[\"default\"][\"static\"](_path[\"default\"].join(__dirname, '/build')));\napp.use(_bodyParser[\"default\"].json()); // DB SETUP & TEARDOWN\n\nvar withDB =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(operations, res) {\n    var client, db;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useUnifiedTopology: true\n            });\n\n          case 3:\n            client = _context.sent;\n            db = client.db('blog-project');\n            _context.next = 7;\n            return operations(db);\n\n          case 7:\n            client.close();\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: 'ERROR: Could Not Connect to DB',\n              error: _context.t0\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function withDB(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\napp.get('/api/articles/:name',\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(req, res) {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            withDB(\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee2(db) {\n                var articleName, articleInfo;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context2.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articleInfo = _context2.sent;\n                        res.status(200).json(articleInfo);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/articles/:name/upvote',\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(req, res) {\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            withDB(\n            /*#__PURE__*/\n            function () {\n              var _ref5 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee4(db) {\n                var articleName, articleInfo, updatedArticleInfo;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        articleName = req.params.name;\n                        _context4.next = 3;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 3:\n                        articleInfo = _context4.sent;\n                        _context4.next = 6;\n                        return db.collection('articles').updateOne({\n                          name: articleName\n                        }, {\n                          $set: {\n                            upvotes: articleInfo.upvotes + 1\n                          }\n                        });\n\n                      case 6:\n                        _context4.next = 8;\n                        return db.collection('articles').findOne({\n                          name: articleName\n                        });\n\n                      case 8:\n                        updatedArticleInfo = _context4.sent;\n                        res.status(200).json(updatedArticleInfo);\n\n                      case 10:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x8) {\n                return _ref5.apply(this, arguments);\n              };\n            }(), res);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}());\napp.post('/api/articles/:name/add-comment', function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  var articleName = req.params.name;\n  withDB(\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee6(db) {\n      var articleInfo, updatedArticleInfo;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 2:\n              articleInfo = _context6.sent;\n              _context6.next = 5;\n              return db.collection('articles').updateOne({\n                name: articleName\n              }, {\n                $set: {\n                  comments: articleInfo.comments.concat({\n                    username: username,\n                    text: text\n                  })\n                }\n              });\n\n            case 5:\n              _context6.next = 7;\n              return db.collection('articles').findOne({\n                name: articleName\n              });\n\n            case 7:\n              updatedArticleInfo = _context6.sent;\n              res.status(200).json(updatedArticleInfo);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x9) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), res);\n});\napp.get('*', function (req, res) {\n  res.sendFile(_path[\"default\"].join(__dirname + 'build/index.html'));\n});\napp.listen(port, function () {\n  return console.log(\"Example app listening on port \".concat(port, \"!\"));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "port",
        "use",
        "express",
        "path",
        "join",
        "__dirname",
        "bodyParser",
        "json",
        "withDB",
        "operations",
        "res",
        "MongoClient",
        "connect",
        "useUnifiedTopology",
        "client",
        "db",
        "close",
        "status",
        "message",
        "error",
        "get",
        "req",
        "articleName",
        "params",
        "name",
        "collection",
        "findOne",
        "articleInfo",
        "post",
        "updateOne",
        "$set",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "comments",
        "concat",
        "sendFile",
        "listen",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/tcorley/Playground/PRACTICE/LearnJS/Lynda/PathReact/FullStack/blog-backend/src",
      "sourcesContent": [
        "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport path from 'path';\n\nconst app = express();\nconst port = 8000;\n\napp.use(express.static(path.join(__dirname, '/build')));\napp.use(bodyParser.json());\n\n// DB SETUP & TEARDOWN\nconst withDB = async (operations, res) => {\n  try {\n    // connect() returns a (client object) promise\n    const client = await MongoClient.connect('mongodb://localhost:27017', {\n      useUnifiedTopology: true\n    });\n    const db = client.db('blog-project');\n\n    await operations(db);\n\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: 'ERROR: Could Not Connect to DB', error });\n  }\n};\n\napp.get('/api/articles/:name', async (req, res) => {\n  withDB(async db => {\n    const articleName = req.params.name;\n\n    const articleInfo = await db\n      .collection('articles')\n      .findOne({ name: articleName });\n    res.status(200).json(articleInfo);\n  }, res);\n});\n\napp.post('/api/articles/:name/upvote', async (req, res) => {\n  withDB(async db => {\n    const articleName = req.params.name;\n\n    const articleInfo = await db\n      .collection('articles')\n      .findOne({ name: articleName });\n    await db.collection('articles').updateOne(\n      { name: articleName },\n      {\n        $set: {\n          upvotes: articleInfo.upvotes + 1\n        }\n      }\n    );\n    const updatedArticleInfo = await db\n      .collection('articles')\n      .findOne({ name: articleName });\n\n    res.status(200).json(updatedArticleInfo);\n  }, res);\n});\n\napp.post('/api/articles/:name/add-comment', (req, res) => {\n  const { username, text } = req.body;\n  const articleName = req.params.name;\n\n  withDB(async db => {\n    const articleInfo = await db\n      .collection('articles')\n      .findOne({ name: articleName });\n    await db.collection('articles').updateOne(\n      { name: articleName },\n      {\n        $set: {\n          comments: articleInfo.comments.concat({ username, text })\n        }\n      }\n    );\n    const updatedArticleInfo = await db\n      .collection('articles')\n      .findOne({ name: articleName });\n    res.status(200).json(updatedArticleInfo);\n  }, res);\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname + 'build/index.html'));\n});\n\napp.listen(port, () => console.log(`Example app listening on port ${port}!`));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1582658761021
  }
}